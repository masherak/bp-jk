// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 9,
                            CourseName = "Course 9"
                        },
                        new
                        {
                            CourseId = 10,
                            CourseName = "Course 10"
                        },
                        new
                        {
                            CourseId = 11,
                            CourseName = "Course 11"
                        },
                        new
                        {
                            CourseId = 12,
                            CourseName = "Course 12"
                        },
                        new
                        {
                            CourseId = 17,
                            CourseName = "Course 17"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.EconomicIndicator", b =>
                {
                    b.Property<int>("EconomicIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EconomicIndicatorId"));

                    b.Property<float>("Gdp")
                        .HasColumnType("real");

                    b.Property<float>("InflationRate")
                        .HasColumnType("real");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<float>("UnemploymentRate")
                        .HasColumnType("real");

                    b.HasKey("EconomicIndicatorId");

                    b.HasIndex("StudentId");

                    b.ToTable("EconomicIndicators");

                    b.HasData(
                        new
                        {
                            EconomicIndicatorId = 1,
                            Gdp = -0.92f,
                            InflationRate = 0.3f,
                            StudentId = 1,
                            UnemploymentRate = 16.2f
                        },
                        new
                        {
                            EconomicIndicatorId = 2,
                            Gdp = -4.06f,
                            InflationRate = 2.8f,
                            StudentId = 2,
                            UnemploymentRate = 15.5f
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.PredictedLabel", b =>
                {
                    b.Property<int>("PredictedLabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PredictedLabelId"));

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PredictedLabelId");

                    b.ToTable("PredictedLabels");
                });

            modelBuilder.Entity("Infrastructure.Entities.Qualification", b =>
                {
                    b.Property<int>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QualificationId"));

                    b.Property<string>("QualificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QualificationId");

                    b.ToTable("Qualifications");

                    b.HasData(
                        new
                        {
                            QualificationId = 1,
                            QualificationName = "Qualification 1"
                        },
                        new
                        {
                            QualificationId = 10,
                            QualificationName = "Qualification 10"
                        },
                        new
                        {
                            QualificationId = 13,
                            QualificationName = "Qualification 13"
                        },
                        new
                        {
                            QualificationId = 14,
                            QualificationName = "Qualification 14"
                        },
                        new
                        {
                            QualificationId = 22,
                            QualificationName = "Qualification 22"
                        },
                        new
                        {
                            QualificationId = 27,
                            QualificationName = "Qualification 27"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int>("ApplicationMode")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationOrder")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("DaytimeEveningAttendance")
                        .HasColumnType("int");

                    b.Property<int>("FatherOccupation")
                        .HasColumnType("int");

                    b.Property<int>("FatherQualificationId")
                        .HasColumnType("int");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<int>("MotherOccupation")
                        .HasColumnType("int");

                    b.Property<int>("MotherQualificationId")
                        .HasColumnType("int");

                    b.Property<int>("Nationality")
                        .HasColumnType("int");

                    b.Property<int?>("PredictedLabelId")
                        .HasColumnType("int");

                    b.Property<int>("PreviousQualificationId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("FatherQualificationId");

                    b.HasIndex("MotherQualificationId");

                    b.HasIndex("PredictedLabelId");

                    b.HasIndex("PreviousQualificationId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            ApplicationMode = 8,
                            ApplicationOrder = 1,
                            CourseId = 11,
                            DaytimeEveningAttendance = 1,
                            FatherOccupation = 6,
                            FatherQualificationId = 1,
                            MaritalStatus = 1,
                            MotherOccupation = 10,
                            MotherQualificationId = 1,
                            Nationality = 1,
                            PreviousQualificationId = 1
                        },
                        new
                        {
                            StudentId = 2,
                            ApplicationMode = 13,
                            ApplicationOrder = 1,
                            CourseId = 9,
                            DaytimeEveningAttendance = 1,
                            FatherOccupation = 9,
                            FatherQualificationId = 1,
                            MaritalStatus = 1,
                            MotherOccupation = 5,
                            MotherQualificationId = 13,
                            Nationality = 1,
                            PreviousQualificationId = 1
                        },
                        new
                        {
                            StudentId = 3,
                            ApplicationMode = 8,
                            ApplicationOrder = 1,
                            CourseId = 11,
                            DaytimeEveningAttendance = 1,
                            FatherOccupation = 9,
                            FatherQualificationId = 27,
                            MaritalStatus = 1,
                            MotherOccupation = 8,
                            MotherQualificationId = 22,
                            Nationality = 1,
                            PreviousQualificationId = 1
                        },
                        new
                        {
                            StudentId = 4,
                            ApplicationMode = 12,
                            ApplicationOrder = 1,
                            CourseId = 17,
                            DaytimeEveningAttendance = 0,
                            FatherOccupation = 3,
                            FatherQualificationId = 27,
                            MaritalStatus = 2,
                            MotherOccupation = 2,
                            MotherQualificationId = 22,
                            Nationality = 1,
                            PreviousQualificationId = 1
                        },
                        new
                        {
                            StudentId = 5,
                            ApplicationMode = 8,
                            ApplicationOrder = 1,
                            CourseId = 10,
                            DaytimeEveningAttendance = 1,
                            FatherOccupation = 9,
                            FatherQualificationId = 14,
                            MaritalStatus = 1,
                            MotherOccupation = 10,
                            MotherQualificationId = 22,
                            Nationality = 1,
                            PreviousQualificationId = 1
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.StudentPerformance", b =>
                {
                    b.Property<int>("PerformanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceId"));

                    b.Property<int>("CurricularUnits1StSemApproved")
                        .HasColumnType("int");

                    b.Property<int>("CurricularUnits1StSemCredited")
                        .HasColumnType("int");

                    b.Property<int>("CurricularUnits1StSemEnrolled")
                        .HasColumnType("int");

                    b.Property<int>("CurricularUnits1StSemEvaluations")
                        .HasColumnType("int");

                    b.Property<float>("CurricularUnits1StSemGrade")
                        .HasColumnType("real");

                    b.Property<int>("CurricularUnits1StSemWithoutEvaluations")
                        .HasColumnType("int");

                    b.Property<int>("CurricularUnits2NdSemApproved")
                        .HasColumnType("int");

                    b.Property<int>("CurricularUnits2NdSemCredited")
                        .HasColumnType("int");

                    b.Property<int>("CurricularUnits2NdSemEnrolled")
                        .HasColumnType("int");

                    b.Property<int>("CurricularUnits2NdSemEvaluations")
                        .HasColumnType("int");

                    b.Property<float>("CurricularUnits2NdSemGrade")
                        .HasColumnType("real");

                    b.Property<int>("CurricularUnits2NdSemWithoutEvaluations")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("PerformanceId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPerformances");

                    b.HasData(
                        new
                        {
                            PerformanceId = 1,
                            CurricularUnits1StSemApproved = 5,
                            CurricularUnits1StSemCredited = 0,
                            CurricularUnits1StSemEnrolled = 6,
                            CurricularUnits1StSemEvaluations = 5,
                            CurricularUnits1StSemGrade = 13.4f,
                            CurricularUnits1StSemWithoutEvaluations = 0,
                            CurricularUnits2NdSemApproved = 4,
                            CurricularUnits2NdSemCredited = 0,
                            CurricularUnits2NdSemEnrolled = 6,
                            CurricularUnits2NdSemEvaluations = 4,
                            CurricularUnits2NdSemGrade = 12.3f,
                            CurricularUnits2NdSemWithoutEvaluations = 0,
                            StudentId = 1
                        },
                        new
                        {
                            PerformanceId = 2,
                            CurricularUnits1StSemApproved = 6,
                            CurricularUnits1StSemCredited = 0,
                            CurricularUnits1StSemEnrolled = 6,
                            CurricularUnits1StSemEvaluations = 6,
                            CurricularUnits1StSemGrade = 13.4f,
                            CurricularUnits1StSemWithoutEvaluations = 0,
                            CurricularUnits2NdSemApproved = 6,
                            CurricularUnits2NdSemCredited = 0,
                            CurricularUnits2NdSemEnrolled = 6,
                            CurricularUnits2NdSemEvaluations = 6,
                            CurricularUnits2NdSemGrade = 14.2f,
                            CurricularUnits2NdSemWithoutEvaluations = 0,
                            StudentId = 2
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.EconomicIndicator", b =>
                {
                    b.HasOne("Infrastructure.Entities.Student", "Student")
                        .WithMany("EconomicIndicators")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Entities.Student", b =>
                {
                    b.HasOne("Infrastructure.Entities.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Qualification", "FatherQualification")
                        .WithMany("StudentsWithFatherQualification")
                        .HasForeignKey("FatherQualificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Qualification", "MotherQualification")
                        .WithMany("StudentsWithMotherQualification")
                        .HasForeignKey("MotherQualificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.PredictedLabel", null)
                        .WithMany("Students")
                        .HasForeignKey("PredictedLabelId");

                    b.HasOne("Infrastructure.Entities.Qualification", "PreviousQualification")
                        .WithMany("StudentsWithPreviousQualification")
                        .HasForeignKey("PreviousQualificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("FatherQualification");

                    b.Navigation("MotherQualification");

                    b.Navigation("PreviousQualification");
                });

            modelBuilder.Entity("Infrastructure.Entities.StudentPerformance", b =>
                {
                    b.HasOne("Infrastructure.Entities.Student", "Student")
                        .WithMany("StudentPerformances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Entities.Course", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Infrastructure.Entities.PredictedLabel", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Infrastructure.Entities.Qualification", b =>
                {
                    b.Navigation("StudentsWithFatherQualification");

                    b.Navigation("StudentsWithMotherQualification");

                    b.Navigation("StudentsWithPreviousQualification");
                });

            modelBuilder.Entity("Infrastructure.Entities.Student", b =>
                {
                    b.Navigation("EconomicIndicators");

                    b.Navigation("StudentPerformances");
                });
#pragma warning restore 612, 618
        }
    }
}
