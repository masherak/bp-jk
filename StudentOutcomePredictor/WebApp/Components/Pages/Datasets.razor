@page "/datasets"
@using System.Net
@using WebApp.Models
@inject ApplicationDbContext Context
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<MudGrid>
    <MudItem xs="12" sm="4" md="4">
        <MudPaper Elevation="1" Class="pa-4">
            <MudText Typo="Typo.h5" Class="d-flex align-center justify-center">
                Nahrání nového datasetu
            </MudText>
            
            <MudDivider Style="margin-top: 5px;margin-bottom: 25px"/>
            
            <MudFileUpload Disabled="_isTaskRunning" T="IBrowserFile" Accept=".csv" FilesChanged="OnFileUploadAsync" MaximumFileCount="100">
                <ButtonTemplate>
                    <MudButton Class="mud-width-full" HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               for="@context.Id">
                        Only .csv files (100Mb max)
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="8" md="8">
        <MudPaper Elevation="1" Class="pa-4">
            <MudText Typo="Typo.h5" Class="d-flex align-center justify-center">
                Existující datasety
            </MudText>

            <MudDivider Style="margin-top: 5px;margin-bottom: 25px"/>

            <MudTable Items="_datasetItems" Dense>
                <HeaderContent>
                    <MudTh>Jméno souboru</MudTh>
                    <MudTh>Datum nahrání</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>@context.ParsedDateTime</MudTd>
                </RowTemplate>
            </MudTable>

        </MudPaper>
    </MudItem>
</MudGrid>

<MudOverlay Visible="_isTaskRunning">
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
</MudOverlay>

@code {
    private bool _isTaskRunning;

    private HashSet<DatasetItem> _datasetItems = [];
    
    protected override async Task OnInitializedAsync()
    {
        await RefreshDatasetsAsync();
    }
    
    private async Task OnFileUploadAsync(IBrowserFile? file)
    {
        if (file == null)
        {
            throw new ArgumentException("File is required");
        }

        try
        {
            Snackbar.Add("Soubor je nahráván", Severity.Info);
            
            _isTaskRunning = true;

            if (await Context.DatasetFiles.AnyAsync(_ => _.Name == file.Name))
            {
                Snackbar.Add($"Soubor {file.Name} již existuje, zvolte unikátní jméno", Severity.Error);
                
                return;
            }
            
            await using var stream = file.OpenReadStream(100_000_000);
        
            var buffer = new byte[file.Size];
        
            await stream.ReadAsync(buffer, 0, (int)file.Size);
        
            var datasetFile = new DatasetFile
            {
                Name = file.Name,
                Content = buffer,
                Created = DateTime.UtcNow
            };

            await Context.DatasetFiles.AddAsync(datasetFile);

            await Context.SaveChangesAsync();
            
            await RefreshDatasetsAsync();
            
            Snackbar.Add("Soubor uložen", Severity.Success);
        }
        finally
        {
            _isTaskRunning = false;
        }
    }

    private async Task RefreshDatasetsAsync()
    {
        var list = await Context.DatasetFiles
            .OrderByDescending(_ => _.Created)
            .Select(_ => new DatasetItem
            {
                Name = _.Name,
                Created = _.Created
            }).ToListAsync();

        _datasetItems = list.ToHashSet();
    }
}