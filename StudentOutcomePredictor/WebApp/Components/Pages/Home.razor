@page "/"
@inject ApplicationDbContext Context
@inject PredictionService PredictionService
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>Prediktor studijních výsledků</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudPaper Elevation="1" Class="pa-4">
            <MudText Typo="Typo.h5" Class="d-flex align-center justify-center">
                ML Model
                @if (PredictionService.IsTrained())
                {
                    <MudIcon Color="Color.Success" Size="Size.Medium" Icon="@Icons.Material.Filled.CheckCircle"/>
                }
                else
                {
                    <MudIcon Color="Color.Error" Size="Size.Medium" Icon="@Icons.Material.Filled.ChangeCircle"/>
                }
            </MudText>
            
            <MudDivider Style="margin-top: 5px;margin-bottom: 25px"/>
            
            @if (PredictionService.IsTrained())
            {
                if (_metrics != null)
                {
                    <MudText Typo="Typo.body1" Class="d-flex align-center justify-center">
                        Macro accuracy: @_metrics.MacroAccuracy.Round()
                    </MudText>
                    <MudText Typo="Typo.body1" Class="d-flex align-center justify-center">
                        Micro accuracy: @_metrics.MicroAccuracy.Round()
                    </MudText>
                    <MudText Typo="Typo.body1" Class="d-flex align-center justify-center">
                        Log-loss: @_metrics.LogLoss.Round()
                    </MudText>
                    <MudText Typo="Typo.body1" Class="d-flex align-center justify-center">
                        Log-loss reduction: @_metrics.LogLossReduction.Round()
                    </MudText>
                }
            }
            else
            {
                <MudButton Disabled="@_isTaskRunning" OnClick="OnClickTrainAsync" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">
                    @if (_isTaskRunning)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Typo="Typo.button" Class="ms-2">Trénuji...</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.button">Trénovat</MudText>
                    }
                </MudButton>
            }
        </MudPaper>
    </MudItem>

    @if (PredictionService.IsTrained())
    {
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="1" Class="pa-4">
                <MudText Typo="Typo.h5" Class="d-flex align-center justify-center">
                    Data
                </MudText>

                <MudDivider Style="margin-top: 5px;margin-bottom: 25px"/>

                <MudSelect T="string?" Label="Vyberte studijní obor" ValueChanged="OnChangeStudyFieldAsync">
                    @if (_studyFields != null)
                    {
                        foreach (var studyField in _studyFields)
                        {
                            <MudSelectItem T="string?" Value="@studyField"/>
                        }
                    }
                </MudSelect>

                @if (!string.IsNullOrWhiteSpace(_selectedStudyField))
                {
                    <MudSelect T="int?" Label="Vyberte ročník" ValueChanged="OnChangeSelectedYear">
                        @if (_years != null)
                        {
                            foreach (var year in _years)
                            {
                                <MudSelectItem T="int?" Value="@year"/>
                            }
                        }
                    </MudSelect>

                    <MudSelect T="string?" Label="Vyberte předmět" @bind-Value="_selectedSubject">
                        @if (_subjects != null)
                        {
                            foreach (var subject in _subjects)
                            {
                                <MudSelectItem T="string?" Value="@subject"/>
                            }
                        }
                    </MudSelect>

                    @if (_selectedYear.HasValue)
                    {
                        <MudSelect T="int?" Label="Vyberte věk" @bind-Value="_selectedAge">
                            @foreach (var age in _ages)
                            {
                                <MudSelectItem T="int?" Value="@(age.Value + _selectedYear.Value)"/>
                            }
                        </MudSelect>
                    }
                }

                @if (_selectedAge.HasValue && !string.IsNullOrWhiteSpace(_selectedStudyField) && _selectedYear.HasValue && !string.IsNullOrWhiteSpace(_selectedSubject))
                {
                    <MudButton Style="margin-top: 25px" OnClick="OnClickPredictAsync" Variant="Variant.Outlined" Color="Color.Primary" FullWidth="true">
                        <MudText Typo="Typo.button">Predict Grade</MudText>
                    </MudButton>
                }
            </MudPaper>
        </MudItem>
        
        @if (_predictionResult != null)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="1" Class="pa-4">
                    <MudText Typo="Typo.h5" Class="d-flex align-center justify-center">
                        Prediction
                    </MudText>

                    <MudDivider Style="margin-top: 5px;margin-bottom: 25px"/>

                    <MudText Typo="Typo.h6" Class="d-flex align-center justify-center">
                        Predicted Grade: <b>@_predictionResult.PredictedGrade</b>
                    </MudText>
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid>

@code {
    private bool _isTaskRunning;
    
    int? _selectedAge;
    readonly ICollection<int?> _ages = Enumerable.Range(17, 14).Select(_ => (int?)_).ToList();
    
    string? _selectedStudyField;
    ICollection<string>? _studyFields;
    
    int? _selectedYear;
    ICollection<int?>? _years;
    
    string? _selectedSubject;
    ICollection<string>? _subjects;

    MulticlassClassificationMetrics? _metrics;

    PredictionResult? _predictionResult;
    
    protected override async Task OnInitializedAsync()
    {
        _studyFields = await Context.StudyFields.Select(_ => _.Name).OrderBy(_ => _).ToListAsync();

        _years = await Context.Years.Select(_ => (int?)_.Year).OrderBy(_ => _).ToListAsync();

        _metrics = PredictionService.GetMetrics();
    }

    async Task OnClickTrainAsync()
    {
        try
        {
            _isTaskRunning = true;
            
            _metrics = await PredictionService.TrainAsync();
        }
        finally
        {
            _isTaskRunning = false;
        }
    }
    
    async Task OnChangeStudyFieldAsync(string? value)
    {
        _selectedStudyField = value;

        _selectedSubject = null;
        
        _subjects = await Context.Subjects.Where(_ => _.StudyField.Name == value).Select(_ => _.Name).OrderBy(_ => _).ToListAsync();
    }

    void OnChangeSelectedYear(int? value)
    {
        _selectedYear = value;

        _selectedAge = null;
    }

    async Task OnClickPredictAsync()
    {
        _predictionResult = PredictionService.PredictGrade(_selectedAge.Value, _selectedStudyField, _selectedYear.Value, _selectedSubject);

        var predictionHistory = new PredictionHistory
        {
            StudyFieldId = await Context.StudyFields
                .Where(_ => _.Name == _selectedStudyField)
                .Select(_ => _.Id)
                .SingleAsync(),
            YearId = await Context.Years
                .Where(_ => _.Year == _selectedYear.Value)
                .Select(_ => _.Id)
                .SingleAsync(),
            SubjectId = await Context.Subjects
                .Where(_ => _.Name == _selectedSubject && _.StudyField.Name == _selectedStudyField)
                .Select(_ => _.Id)
                .SingleAsync(),
            PredictedGrade = _predictionResult.PredictedGrade,
            Created = DateTime.UtcNow
        };

        await Context.PredictionHistories.AddAsync(predictionHistory);

        await Context.SaveChangesAsync();

        Snackbar.Add("Záznam uložen", Severity.Success);
    }

}