@page "/"
@inject ApplicationDbContext Context
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudPaper Elevation="1" Class="pa-4">
            <MudText Typo="Typo.h5" Class="d-flex align-center justify-center">
                ML Model
                @if (PredictionService.IsTrained())
                {
                    <MudIcon Color="Color.Success" Size="Size.Medium" Icon="@Icons.Material.Filled.CheckCircle"/>
                }
                else
                {
                    <MudIcon Color="Color.Error" Size="Size.Medium" Icon="@Icons.Material.Filled.ChangeCircle"/>
                }
            </MudText>
            
            <MudDivider Style="margin-top: 5px;margin-bottom: 25px"/>
            
            @if (PredictionService.IsTrained())
            {
                if (_metrics != null)
                {
                    <MudText Typo="Typo.body1" Class="d-flex align-center justify-center">
                        <b class="mr-2">Macro accuracy: </b> @_metrics.MacroAccuracy.Round()
                    </MudText>
                    <MudText Typo="Typo.body1" Class="d-flex align-center justify-center">
                        <b class="mr-2">Micro accuracy: </b> @_metrics.MicroAccuracy.Round()
                    </MudText>
                    <MudText Typo="Typo.body1" Class="d-flex align-center justify-center">
                        <b class="mr-2">Log-loss: </b> @_metrics.LogLoss.Round()
                    </MudText>
                    <MudText Typo="Typo.body1" Class="d-flex align-center justify-center">
                        <b class="mr-2">Log-loss reduction: </b> @_metrics.LogLossReduction.Round()
                    </MudText>
                }
            }
            else
            {
                <MudText Typo="Typo.body1" Class="d-flex align-center justify-center">
                    <b class="mr-2">Loading...</b>
                </MudText>
            }
        </MudPaper>
    </MudItem>

    @if (PredictionService.IsTrained())
    {
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="1" Class="pa-4">
                <MudText Typo="Typo.h5" Class="d-flex align-center justify-center">
                    Data
                </MudText>

                <MudDivider Style="margin-top: 5px;margin-bottom: 25px"/>
                
            </MudPaper>
        </MudItem>
        
        @if (_predictionResult != null)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="1" Class="pa-4">
                    <MudText Typo="Typo.h5" Class="d-flex align-center justify-center">
                        Prediction
                    </MudText>

                    <MudDivider Style="margin-top: 5px;margin-bottom: 25px"/>



                    <MudDivider Style="margin-top: 25px;margin-bottom: 25px"/>

                    @foreach (var predictionProbability in _predictionResult.PredictionProbabilities)
                    {
                        <MudText Typo="Typo.body1" Class="d-flex align-center justify-center">
                            Prediction: @predictionProbability.Label (@predictionProbability.Probability.Round()%)
                        </MudText>
                    }
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid>

<MudOverlay Visible="_isTaskRunning">
    <MudProgressCircular Size="Size.Large" Indeterminate="true" Color="Color.Primary" />
</MudOverlay>

@code {
    private bool _isTaskRunning;
    
    MulticlassClassificationMetrics? _metrics;

    PredictionResult? _predictionResult;

    private async Task OnClickPredictAsync()
    {
        try
        {
            _isTaskRunning = true;

            //_predictionResult = PredictionService.Predict();

            // TODO:
            _predictionResult = null;

            await Context.SaveChangesAsync();

            Snackbar.Add("Záznam uložen", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Nastal problém - {ex.Message}", Severity.Error);
        }
        finally
        {
            _isTaskRunning = false;
        }
    }
}